Introduction to EPICS Device Support
====================================

The EPICS Device support module is designed to provide an easy to use but fully
functional interface to EPICS for device drivers.  The core mechanism provides
device support for records of the five basic Channel Access types (double,
32-bit integer, boolean, enumerations, strings) together with waveforms of these
types.

The module is used as follows:

1.  Initialise EPICS device support with the appropriate function calls.

2.  Dynamically create interfaces to all the records to be generated by the IOC.

3.  Call :func:`iocInit`.

This support module comprises two parts: a C API to be used by the IOC to
implement its own EPICS driver support using the API documented here, and a
Python API to help with building the associated EPICS database file.

The table below shows the correspondence between header files and documentation
chapters (the header files are listed roughly in the order they need to be
``#include``\ d):

==================  ===============================
``error.h``         :doc:`error`
``epics_device.h``  :doc:`epics_device`
``epics_extra.h``   :doc:`epics_extra`
``hashtable.h``     :doc:`hashtable`
``persistence.h``   :doc:`persistence`
``pvlogging.h``     :doc:`pvlogging`
Python Support      :doc:`builder`
==================  ===============================

The following sections document the various components provided by this module.
For each component there is a header file with the same name providing the
functionality documented here.

:doc:`epics_device`:
    This is the core functionality provided by this support module, defining
    mechanisms for declaring and implementing EPICS record bindings for the
    eleven supported record types.

:doc:`epics_extra`:
    This provides a number of extra facilities for writing EPICS driver support.

:doc:`persistence`:
    This is an alternative mechanism to autosave/restore and provides tightly
    integrated support for persistent PV state over IOC restarts.

:doc:`pvlogging`:
    This supports a simple mechanism for logging channel access writes to PVs.

:doc:`error`:
    A generic error handling mechanism is used throughout this support module
    and the associated header file is available for use elsewere.

:doc:`hashtable`:
    This is a hashtable implementation with decent performance taking much
    detailed inspiration from Python's implementation of dictionaries.

:doc:`builder`
    This module is designed for driver support for individual records to be
    written at the same time as the associated EPICS database record definition,
    in particular there is an exact one-to-one correspondence between published
    EPICS Device records and the corresponding records in the database.  To help
    with this style of writing this Python module uses IOC builder support to
    make writing databases simple.
